--- a/BUILD.gn
+++ b/BUILD.gn
@@ -23,6 +23,13 @@
   configs = [ "//camera/build:cros_camera_common" ]
 }
 
+config("mpp") {
+  include_dirs = ["${sysroot}//usr/include/rockchip"]
+  lib_dirs = [ "${sysroot}//usr/lib" ]
+  libs = ["rockchip_mpp", "rockchip_vpu"]
+  visibility = [ ":*" ]
+}
+
 shared_library("libcamera_hal") {
   sources = [
     "//camera/common/vendor_tag_manager.cc",
@@ -42,7 +49,7 @@
     "v4l2_camera_device.cc",
     "vendor_tag.cc",
   ]
-  configs += [ ":target_defaults" ]
+  configs += [ ":target_defaults", ":mpp"]
 }
 
 if (use.test) {
--- a/cached_frame.cc
+++ b/cached_frame.cc
@@ -345,15 +345,21 @@
     return -EINVAL;
   }
   base::ElapsedTimer sw_timer;
-  ret = image_processor_->ConvertFormat(in_frame, *temp_i420_frame_);
+  ret = image_processor_->ConvertFormat(in_frame, out_frame);
   if (ret) {
-    LOGF(ERROR) << "Decode JPEG to YU12 failed: " << ret;
-    return -EAGAIN;
-  }
-  ret = image_processor_->ConvertFormat(*temp_i420_frame_, out_frame);
-  if (ret) {
-    return -EINVAL;
+    LOGF(ERROR) << "Decode JPEG to NV12 failed: " << ret;
+
+    ret = image_processor_->ConvertFormat(in_frame, *temp_i420_frame_);
+    if (ret) {
+      LOGF(ERROR) << "Decode JPEG to YU12 failed: " << ret;
+      return -EAGAIN;
+    }
+    ret = image_processor_->ConvertFormat(*temp_i420_frame_, out_frame);
+    if (ret) {
+      return -EINVAL;
+    }
   }
+
   camera_metrics_->SendJpegProcessLatency(JpegProcessType::kDecode,
                                           JpegProcessMethod::kSoftware,
                                           sw_timer.Elapsed());
--- a/image_processor.cc
+++ b/image_processor.cc
@@ -13,6 +13,7 @@
 
 #include "cros-camera/common.h"
 #include "hal/usb/common_types.h"
+#include "rk_mpi.h"
 
 namespace cros {
 
@@ -271,6 +272,19 @@
   } else if (in_frame.GetFourcc() == V4L2_PIX_FMT_JPEG ||
              in_frame.GetFourcc() == V4L2_PIX_FMT_MJPEG) {
     switch (out_frame.GetFourcc()) {
+      case V4L2_PIX_FMT_NV12: {
+        int res =
+            mpp_convert_mjpeg_to_nv12(in_frame.GetData(), in_frame.GetDataSize(),
+                               out_frame.GetData(FrameBuffer::YPLANE),
+                               out_frame.GetStride(FrameBuffer::YPLANE),
+                               out_frame.GetData(FrameBuffer::UPLANE),
+                               out_frame.GetStride(FrameBuffer::UPLANE),
+                               in_frame.GetWidth(), in_frame.GetHeight(),
+                               out_frame.GetWidth(), out_frame.GetHeight());
+        LOGF_IF(ERROR, res) << "libyuv::MJPGToNV12() returns " << res;
+        return res ? -EINVAL : 0;
+      }
+
       case V4L2_PIX_FMT_YUV420:     // YU12
       case V4L2_PIX_FMT_YUV420M: {  // YM12, multiple planes YU12
         int res = libyuv::MJPGToI420(
