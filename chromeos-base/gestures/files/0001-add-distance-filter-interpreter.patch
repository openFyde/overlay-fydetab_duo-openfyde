From c4adbc9eadd04909e5275cfdd22c4b87dd9f1f9d Mon Sep 17 00:00:00 2001
From: yibo <yibo@fydeos.io>
Date: Tue, 23 Sep 2025 15:57:29 +0800
Subject: [PATCH] add distance filter to gestures fix touchpad warp issue

Change-Id: I8de6a0d86b207601022ece3271bddc3084a5dd25
---
 Android.bp                            |  1 +
 Makefile                              |  1 +
 include/distance_filter_interpreter.h | 51 +++++++++++++++++++
 src/distance_filter_interpreter.cc    | 70 +++++++++++++++++++++++++++
 src/gestures.cc                       |  3 ++
 5 files changed, 126 insertions(+)
 create mode 100644 include/distance_filter_interpreter.h
 create mode 100644 src/distance_filter_interpreter.cc

diff --git a/Android.bp b/Android.bp
index 082af5b..52ad66b 100644
--- a/Android.bp
+++ b/Android.bp
@@ -89,6 +89,7 @@ cc_library_static {
         "src/activity_log.cc",
         "src/box_filter_interpreter.cc",
         "src/click_wiggle_filter_interpreter.cc",
+        "src/distance_filter_interpreter.cc",
         "src/file_util.cc",
         "src/filter_interpreter.cc",
         "src/finger_merge_filter_interpreter.cc",
diff --git a/Makefile b/Makefile
index 65eccc7..b606b43 100644
--- a/Makefile
+++ b/Makefile
@@ -11,6 +11,7 @@ SO_OBJECTS=\
 	$(OBJDIR)/activity_log.o \
 	$(OBJDIR)/box_filter_interpreter.o \
 	$(OBJDIR)/click_wiggle_filter_interpreter.o \
+	$(OBJDIR)/distance_filter_interpreter.o \
 	$(OBJDIR)/file_util.o \
 	$(OBJDIR)/filter_interpreter.o \
 	$(OBJDIR)/finger_merge_filter_interpreter.o \
diff --git a/include/distance_filter_interpreter.h b/include/distance_filter_interpreter.h
new file mode 100644
index 0000000..7661584
--- /dev/null
+++ b/include/distance_filter_interpreter.h
@@ -0,0 +1,51 @@
+// Copyright 2012 The ChromiumOS Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include <map>
+
+#include <gtest/gtest.h>  // For FRIEND_TEST
+
+#include "include/filter_interpreter.h"
+#include "include/finger_metrics.h"
+#include "include/gestures.h"
+#include "include/prop_registry.h"
+#include "include/tracer.h"
+
+#ifndef GESTURES_DISTANCE_FILTER_INTERPRETER_H_
+#define GESTURES_DISTANCE_FILTER_INTERPRETER_H_
+
+namespace gestures {
+
+// This filter interpreter suppresses fingers that move too far between frames.
+// This provides simple distance-based suppression to catch obvious sensor
+// errors and large jumps.
+
+class DistanceFilterInterpreter : public FilterInterpreter,
+                                  public PropertyDelegate {
+  FRIEND_TEST(DistanceFilterInterpreterTest, SimpleTest);
+ public:
+  // Takes ownership of |next|:
+  DistanceFilterInterpreter(PropRegistry* prop_reg, Interpreter* next,
+                           Tracer* tracer);
+  virtual ~DistanceFilterInterpreter() {}
+
+ protected:
+  virtual void SyncInterpretImpl(HardwareState& hwstate, stime_t* timeout);
+
+ private:
+  // Fingers from the previous SyncInterpret call
+  std::map<short, FingerState> previous_input_;
+
+  // Whether or not this filter is enabled. If disabled, it behaves as a
+  // simple passthrough.
+  BoolProperty enabled_;
+
+  // Maximum distance a finger can move between frames before being flagged
+  // as a teleportation warp. This provides simple distance-based suppression.
+  DoubleProperty max_frame_distance_;
+};
+
+}  // namespace gestures
+
+#endif  // GESTURES_DISTANCE_FILTER_INTERPRETER_H_
\ No newline at end of file
diff --git a/src/distance_filter_interpreter.cc b/src/distance_filter_interpreter.cc
new file mode 100644
index 0000000..3c94b58
--- /dev/null
+++ b/src/distance_filter_interpreter.cc
@@ -0,0 +1,70 @@
+// Copyright 2012 The ChromiumOS Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "include/distance_filter_interpreter.h"
+
+#include "include/tracer.h"
+#include "include/util.h"
+
+namespace gestures {
+
+DistanceFilterInterpreter::DistanceFilterInterpreter(PropRegistry* prop_reg,
+                                                     Interpreter* next,
+                                                     Tracer* tracer)
+    : FilterInterpreter(nullptr, next, tracer, false),
+      enabled_(prop_reg, "Distance Filter Enable", false),
+      max_frame_distance_(prop_reg, "Distance Filter Max Frame Distance", 5.0) {
+  InitName();
+}
+
+void DistanceFilterInterpreter::SyncInterpretImpl(HardwareState& hwstate,
+                                                  stime_t* timeout) {
+  const char name[] = "DistanceFilterInterpreter::SyncInterpretImpl";
+  LogHardwareStatePre(name, hwstate);
+
+  if (!enabled_.val_) {
+    next_->SyncInterpret(hwstate, timeout);
+    return;
+  }
+
+  RemoveMissingIdsFromMap(&previous_input_, hwstate);
+
+  for (size_t i = 0; i < hwstate.finger_cnt; i++) {
+    short tracking_id = hwstate.fingers[i].tracking_id;
+
+    // Check if we have previous frame data for this finger
+    if (MapContainsKey(previous_input_, tracking_id)) {
+      const FingerState& current_fs = hwstate.fingers[i];
+      const FingerState& prev_fs = previous_input_[tracking_id];
+
+      float dx = current_fs.position_x - prev_fs.position_x;
+      float dy = current_fs.position_y - prev_fs.position_y;
+      float distance = sqrtf(dx * dx + dy * dy);
+
+      if (distance > max_frame_distance_.val_) {
+        unsigned old_flags = hwstate.fingers[i].flags;
+
+        hwstate.fingers[i].flags |= (GESTURES_FINGER_WARP_X_MOVE |
+                                     GESTURES_FINGER_WARP_Y_MOVE |
+                                     GESTURES_FINGER_WARP_X_NON_MOVE |
+                                     GESTURES_FINGER_WARP_Y_NON_MOVE |
+                                     GESTURES_FINGER_WARP_TELEPORTATION);
+
+        Log("DISTANCE_SUPPRESS: finger_id=%d, distance=%.3f > max=%.3f, "
+            "movement=(%.3f,%.3f), old_flags=0x%x, new_flags=0x%x",
+            tracking_id, distance, max_frame_distance_.val_,
+            dx, dy, old_flags, hwstate.fingers[i].flags);
+      }
+    }
+  }
+
+  // Update previous input state
+  for (size_t i = 0; i < hwstate.finger_cnt; i++)
+    previous_input_[hwstate.fingers[i].tracking_id] = hwstate.fingers[i];
+
+  LogHardwareStatePost(name, hwstate);
+  next_->SyncInterpret(hwstate, timeout);
+}
+
+}  // namespace gestures
\ No newline at end of file
diff --git a/src/gestures.cc b/src/gestures.cc
index 2907e3e..73ac141 100644
--- a/src/gestures.cc
+++ b/src/gestures.cc
@@ -10,6 +10,7 @@
 #include "include/accel_filter_interpreter.h"
 #include "include/box_filter_interpreter.h"
 #include "include/click_wiggle_filter_interpreter.h"
+#include "include/distance_filter_interpreter.h"
 #include "include/finger_merge_filter_interpreter.h"
 #include "include/finger_metrics.h"
 #include "include/fling_stop_filter_interpreter.h"
@@ -548,6 +549,7 @@ void GestureInterpreter::InitializeTouchpad(void) {
   temp = new IirFilterInterpreter(prop_reg_.get(), temp, tracer_.get());
   temp = new LookaheadFilterInterpreter(prop_reg_.get(), temp, tracer_.get());
   temp = new BoxFilterInterpreter(prop_reg_.get(), temp, tracer_.get());
+  temp = new DistanceFilterInterpreter(prop_reg_.get(), temp, tracer_.get());
   temp = new StationaryWiggleFilterInterpreter(prop_reg_.get(), temp,
                                                tracer_.get());
   temp = new SensorJumpFilterInterpreter(prop_reg_.get(), temp, tracer_.get());
@@ -584,6 +586,7 @@ void GestureInterpreter::InitializeTouchpad2(void) {
                                               tracer_.get());
   temp = new LookaheadFilterInterpreter(prop_reg_.get(), temp, tracer_.get());
   temp = new BoxFilterInterpreter(prop_reg_.get(), temp, tracer_.get());
+  temp = new DistanceFilterInterpreter(prop_reg_.get(), temp, tracer_.get());
   temp = new StationaryWiggleFilterInterpreter(prop_reg_.get(), temp,
                                                tracer_.get());
   temp = new AccelFilterInterpreter(prop_reg_.get(), temp, tracer_.get());
-- 
2.34.1

